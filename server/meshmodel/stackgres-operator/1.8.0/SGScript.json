{
  "id": "00000000-0000-0000-0000-000000000000",
  "kind": "SGScript",
  "apiVersion": "stackgres.io/v1",
  "displayName": "SG Script",
  "format": "JSON",
  "hostID": "00000000-0000-0000-0000-000000000000",
  "metadata": {
   "isNamespaced": true
  },
  "model": {
   "id": "00000000-0000-0000-0000-000000000000",
   "name": "stackgres-operator",
   "version": "1.8.0",
   "displayName": "stackgres-operator",
   "status": "",
   "hostID": "00000000-0000-0000-0000-000000000000",
   "category": {
    "name": "",
    "metadata": null
   },
   "metadata": {
    "source_uri": "https://stackgres.io/downloads/stackgres-k8s/stackgres/1.8.0/helm/stackgres-operator.tgz"
   },
   "components": null,
   "relationships": null
  },
  "schema": "{\n \"properties\": {\n  \"spec\": {\n   \"properties\": {\n    \"continueOnError\": {\n     \"description\": \"If `true`, when any script entry fail will not prevent subsequent script entries from being executed. `false` by default.\\n\",\n     \"type\": \"boolean\"\n    },\n    \"managedVersions\": {\n     \"description\": \"If `true` the versions will be managed by the operator automatically. The user will still be able to update them if needed. `true` by default.\\n\",\n     \"type\": \"boolean\"\n    },\n    \"scripts\": {\n     \"description\": \"A list of SQL scripts.\\n\",\n     \"items\": {\n      \"description\": \"Scripts are executed in auto-commit mode with the user `postgres` in the specified database (or in database `postgres` if not specified).\\n\\nFields `script` and `scriptFrom` are mutually exclusive and only one of them is required.\\n\",\n      \"properties\": {\n       \"database\": {\n        \"description\": \"Database where the script is executed. Defaults to the `postgres` database, if not specified.\\n\",\n        \"type\": \"string\"\n       },\n       \"id\": {\n        \"description\": \"The id is immutable and must be unique across all the script entries. It is replaced by the operator and is used to identify the script for the whole life of the `SGScript` object.\\n\",\n        \"type\": \"integer\"\n       },\n       \"name\": {\n        \"description\": \"Name of the script. Must be unique across this SGScript.\\n\",\n        \"type\": \"string\"\n       },\n       \"retryOnError\": {\n        \"description\": \"If not set or set to `false` the script entry will not be retried if it fails.\\n\\nWhen set to `true` the script execution will be retried with an exponential backoff of 5 minutes,\\n  starting from 10 seconds and a standard deviation of 10 seconds.\\n\\nThis is `false` by default.\\n\",\n        \"type\": \"boolean\"\n       },\n       \"script\": {\n        \"description\": \"Raw SQL script to execute. This field is mutually exclusive with `scriptFrom` field.\\n\",\n        \"type\": \"string\"\n       },\n       \"scriptFrom\": {\n        \"description\": \"Reference to either a Kubernetes [Secret](https://kubernetes.io/docs/concepts/configuration/secret/) or a [ConfigMap](https://kubernetes.io/docs/concepts/configuration/configmap/) that contains the SQL script to execute. This field is mutually exclusive with `script` field.\\n\\nFields `secretKeyRef` and `configMapKeyRef` are mutually exclusive, and one of them is required.\\n\",\n        \"properties\": {\n         \"configMapKeyRef\": {\n          \"description\": \"A [ConfigMap](https://kubernetes.io/docs/concepts/configuration/configmap/) reference that contains the SQL script to execute. This field is mutually exclusive with `secretKeyRef` field.\\n\",\n          \"properties\": {\n           \"key\": {\n            \"description\": \"The key name within the ConfigMap that contains the SQL script to execute.\\n\",\n            \"type\": \"string\"\n           },\n           \"name\": {\n            \"description\": \"The name of the ConfigMap that contains the SQL script to execute.\\n\",\n            \"type\": \"string\"\n           }\n          },\n          \"type\": \"object\"\n         },\n         \"secretKeyRef\": {\n          \"description\": \"A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#secretkeyselector-v1-core) that contains the SQL script to execute. This field is mutually exclusive with `configMapKeyRef` field.\\n\",\n          \"properties\": {\n           \"key\": {\n            \"description\": \"The key of the secret to select from. Must be a valid secret key.\",\n            \"type\": \"string\"\n           },\n           \"name\": {\n            \"description\": \"Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).\",\n            \"type\": \"string\"\n           }\n          },\n          \"type\": \"object\"\n         }\n        },\n        \"type\": \"object\"\n       },\n       \"storeStatusInDatabase\": {\n        \"description\": \"When set to `true` the script entry execution will include storing the status of the execution of this\\n  script entry in the table `managed_sql.status` that will be created in the specified `database`. This\\n  will avoid an operation that fails partially to be unrecoverable requiring the intervention from the user\\n  if user in conjunction with `retryOnError`.\\n\\nIf set to `true` then `wrapInTransaction` field must be set.\\n\\nThis is `false` by default.\\n\",\n        \"type\": \"boolean\"\n       },\n       \"user\": {\n        \"description\": \"User that will execute the script. Defaults to the `postgres` user.\\n\",\n        \"type\": \"string\"\n       },\n       \"version\": {\n        \"description\": \"Version of the script. It will allow to identify if this script entry has been changed.\\n\",\n        \"type\": \"integer\"\n       },\n       \"wrapInTransaction\": {\n        \"description\": \"Wrap the script in a transaction using the specified transaction mode:\\n\\n* `read-committed`: The script will be wrapped in a transaction using [READ COMMITTED](https://www.postgresql.org/docs/current/transaction-iso.html#XACT-READ-COMMITTED) isolation level.\\n* `repeatable-read`: The script will be wrapped in a transaction using [REPEATABLE READ](https://www.postgresql.org/docs/current/transaction-iso.html#XACT-REPEATABLE-READ) isolation level.\\n* `serializable`: The script will be wrapped in a transaction using [SERIALIZABLE](https://www.postgresql.org/docs/current/transaction-iso.html#XACT-SERIALIZABLE) isolation level.\\n\\nIf not set the script entry will not be wrapped in a transaction\\n\",\n        \"type\": \"string\"\n       }\n      },\n      \"type\": \"object\"\n     },\n     \"type\": \"array\"\n    }\n   },\n   \"type\": \"object\"\n  }\n },\n \"required\": [\n  \"metadata\",\n  \"spec\"\n ],\n \"title\": \"SG Script\",\n \"type\": \"object\"\n}"
 }