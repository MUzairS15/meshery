{
  "id": "00000000-0000-0000-0000-000000000000",
  "kind": "Table",
  "apiVersion": "dynamodb.services.k8s.aws/v1alpha1",
  "displayName": "Table",
  "format": "JSON",
  "hostID": "00000000-0000-0000-0000-000000000000",
  "metadata": {
   "isNamespaced": true
  },
  "model": {
   "id": "00000000-0000-0000-0000-000000000000",
   "name": "aws-dynamodb-controller",
   "version": "v1.2.8",
   "displayName": "aws-dynamodb-controller",
   "status": "",
   "hostID": "00000000-0000-0000-0000-000000000000",
   "category": {
    "name": "",
    "metadata": null
   },
   "metadata": {
    "source_uri": "git://github.com/aws-controllers-k8s/dynamodb-controller/main/helm"
   },
   "components": null,
   "relationships": null
  },
  "schema": "{\n \"description\": \"Table is the Schema for the Tables API\",\n \"properties\": {\n  \"spec\": {\n   \"description\": \"TableSpec defines the desired state of Table.\",\n   \"properties\": {\n    \"attributeDefinitions\": {\n     \"description\": \"An array of attributes that describe the key schema for the table and indexes.\",\n     \"items\": {\n      \"description\": \"Represents an attribute for describing the key schema for the table and indexes.\",\n      \"properties\": {\n       \"attributeName\": {\n        \"type\": \"string\"\n       },\n       \"attributeType\": {\n        \"type\": \"string\"\n       }\n      },\n      \"type\": \"object\"\n     },\n     \"type\": \"array\"\n    },\n    \"billingMode\": {\n     \"description\": \"Controls how you are charged for read and write throughput and how you manage\\ncapacity. This setting can be changed later.\\n\\n\\n  - PROVISIONED - We recommend using PROVISIONED for predictable workloads.\\n    PROVISIONED sets the billing mode to Provisioned Mode (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual).\\n\\n\\n  - PAY_PER_REQUEST - We recommend using PAY_PER_REQUEST for unpredictable\\n    workloads. PAY_PER_REQUEST sets the billing mode to On-Demand Mode (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand).\",\n     \"type\": \"string\"\n    },\n    \"continuousBackups\": {\n     \"description\": \"Represents the settings used to enable point in time recovery.\",\n     \"properties\": {\n      \"pointInTimeRecoveryEnabled\": {\n       \"type\": \"boolean\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"deletionProtectionEnabled\": {\n     \"description\": \"Indicates whether deletion protection is to be enabled (true) or disabled\\n(false) on the table.\",\n     \"type\": \"boolean\"\n    },\n    \"globalSecondaryIndexes\": {\n     \"description\": \"One or more global secondary indexes (the maximum is 20) to be created on\\nthe table. Each global secondary index in the array includes the following:\\n\\n\\n  - IndexName - The name of the global secondary index. Must be unique only\\n    for this table.\\n\\n\\n  - KeySchema - Specifies the key schema for the global secondary index.\\n\\n\\n  - Projection - Specifies attributes that are copied (projected) from the\\n    table into the index. These are in addition to the primary key attributes\\n    and index key attributes, which are automatically projected. Each attribute\\n    specification is composed of: ProjectionType - One of the following: KEYS_ONLY\\n\\n\\n  - Only the index and primary keys are projected into the index. INCLUDE\\n\\n\\n  - Only the specified table attributes are projected into the index. The\\n    list of projected attributes is in NonKeyAttributes. ALL - All of the\\n    table attributes are projected into the index. NonKeyAttributes - A list\\n    of one or more non-key attribute names that are projected into the secondary\\n    index. The total count of attributes provided in NonKeyAttributes, summed\\n    across all of the secondary indexes, must not exceed 100. If you project\\n    the same attribute into two different indexes, this counts as two distinct\\n    attributes when determining the total.\\n\\n\\n  - ProvisionedThroughput - The provisioned throughput settings for the\\n    global secondary index, consisting of read and write capacity units.\",\n     \"items\": {\n      \"description\": \"Represents the properties of a global secondary index.\",\n      \"properties\": {\n       \"indexName\": {\n        \"type\": \"string\"\n       },\n       \"keySchema\": {\n        \"items\": {\n         \"description\": \"Represents a single element of a key schema. A key schema specifies the attributes\\nthat make up the primary key of a table, or the key attributes of an index.\\n\\n\\nA KeySchemaElement represents exactly one attribute of the primary key. For\\nexample, a simple primary key would be represented by one KeySchemaElement\\n(for the partition key). A composite primary key would require one KeySchemaElement\\nfor the partition key, and another KeySchemaElement for the sort key.\\n\\n\\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute).\\nThe data type must be one of String, Number, or Binary. The attribute cannot\\nbe nested within a List or a Map.\",\n         \"properties\": {\n          \"attributeName\": {\n           \"type\": \"string\"\n          },\n          \"keyType\": {\n           \"type\": \"string\"\n          }\n         },\n         \"type\": \"object\"\n        },\n        \"type\": \"array\"\n       },\n       \"projection\": {\n        \"description\": \"Represents attributes that are copied (projected) from the table into an\\nindex. These are in addition to the primary key attributes and index key\\nattributes, which are automatically projected.\",\n        \"properties\": {\n         \"nonKeyAttributes\": {\n          \"items\": {\n           \"type\": \"string\"\n          },\n          \"type\": \"array\"\n         },\n         \"projectionType\": {\n          \"type\": \"string\"\n         }\n        },\n        \"type\": \"object\"\n       },\n       \"provisionedThroughput\": {\n        \"description\": \"Represents the provisioned throughput settings for a specified table or index.\\nThe settings can be modified using the UpdateTable operation.\\n\\n\\nFor current minimum and maximum provisioned throughput values, see Service,\\nAccount, and Table Quotas (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html)\\nin the Amazon DynamoDB Developer Guide.\",\n        \"properties\": {\n         \"readCapacityUnits\": {\n          \"format\": \"int64\",\n          \"type\": \"integer\"\n         },\n         \"writeCapacityUnits\": {\n          \"format\": \"int64\",\n          \"type\": \"integer\"\n         }\n        },\n        \"type\": \"object\"\n       }\n      },\n      \"type\": \"object\"\n     },\n     \"type\": \"array\"\n    },\n    \"keySchema\": {\n     \"description\": \"Specifies the attributes that make up the primary key for a table or an index.\\nThe attributes in KeySchema must also be defined in the AttributeDefinitions\\narray. For more information, see Data Model (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html)\\nin the Amazon DynamoDB Developer Guide.\\n\\n\\nEach KeySchemaElement in the array is composed of:\\n\\n\\n  - AttributeName - The name of this key attribute.\\n\\n\\n  - KeyType - The role that the key attribute will assume: HASH - partition\\n    key RANGE - sort key\\n\\n\\nThe partition key of an item is also known as its hash attribute. The term\\n\\\"hash attribute\\\" derives from the DynamoDB usage of an internal hash function\\nto evenly distribute data items across partitions, based on their partition\\nkey values.\\n\\n\\nThe sort key of an item is also known as its range attribute. The term \\\"range\\nattribute\\\" derives from the way DynamoDB stores items with the same partition\\nkey physically close together, in sorted order by the sort key value.\\n\\n\\nFor a simple primary key (partition key), you must provide exactly one element\\nwith a KeyType of HASH.\\n\\n\\nFor a composite primary key (partition key and sort key), you must provide\\nexactly two elements, in this order: The first element must have a KeyType\\nof HASH, and the second element must have a KeyType of RANGE.\\n\\n\\nFor more information, see Working with Tables (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key)\\nin the Amazon DynamoDB Developer Guide.\",\n     \"items\": {\n      \"description\": \"Represents a single element of a key schema. A key schema specifies the attributes\\nthat make up the primary key of a table, or the key attributes of an index.\\n\\n\\nA KeySchemaElement represents exactly one attribute of the primary key. For\\nexample, a simple primary key would be represented by one KeySchemaElement\\n(for the partition key). A composite primary key would require one KeySchemaElement\\nfor the partition key, and another KeySchemaElement for the sort key.\\n\\n\\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute).\\nThe data type must be one of String, Number, or Binary. The attribute cannot\\nbe nested within a List or a Map.\",\n      \"properties\": {\n       \"attributeName\": {\n        \"type\": \"string\"\n       },\n       \"keyType\": {\n        \"type\": \"string\"\n       }\n      },\n      \"type\": \"object\"\n     },\n     \"type\": \"array\"\n    },\n    \"localSecondaryIndexes\": {\n     \"description\": \"One or more local secondary indexes (the maximum is 5) to be created on the\\ntable. Each index is scoped to a given partition key value. There is a 10\\nGB size limit per partition key value; otherwise, the size of a local secondary\\nindex is unconstrained.\\n\\n\\nEach local secondary index in the array includes the following:\\n\\n\\n  - IndexName - The name of the local secondary index. Must be unique only\\n    for this table.\\n\\n\\n  - KeySchema - Specifies the key schema for the local secondary index.\\n    The key schema must begin with the same partition key as the table.\\n\\n\\n  - Projection - Specifies attributes that are copied (projected) from the\\n    table into the index. These are in addition to the primary key attributes\\n    and index key attributes, which are automatically projected. Each attribute\\n    specification is composed of: ProjectionType - One of the following: KEYS_ONLY\\n\\n\\n  - Only the index and primary keys are projected into the index. INCLUDE\\n\\n\\n  - Only the specified table attributes are projected into the index. The\\n    list of projected attributes is in NonKeyAttributes. ALL - All of the\\n    table attributes are projected into the index. NonKeyAttributes - A list\\n    of one or more non-key attribute names that are projected into the secondary\\n    index. The total count of attributes provided in NonKeyAttributes, summed\\n    across all of the secondary indexes, must not exceed 100. If you project\\n    the same attribute into two different indexes, this counts as two distinct\\n    attributes when determining the total.\",\n     \"items\": {\n      \"description\": \"Represents the properties of a local secondary index.\",\n      \"properties\": {\n       \"indexName\": {\n        \"type\": \"string\"\n       },\n       \"keySchema\": {\n        \"items\": {\n         \"description\": \"Represents a single element of a key schema. A key schema specifies the attributes\\nthat make up the primary key of a table, or the key attributes of an index.\\n\\n\\nA KeySchemaElement represents exactly one attribute of the primary key. For\\nexample, a simple primary key would be represented by one KeySchemaElement\\n(for the partition key). A composite primary key would require one KeySchemaElement\\nfor the partition key, and another KeySchemaElement for the sort key.\\n\\n\\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute).\\nThe data type must be one of String, Number, or Binary. The attribute cannot\\nbe nested within a List or a Map.\",\n         \"properties\": {\n          \"attributeName\": {\n           \"type\": \"string\"\n          },\n          \"keyType\": {\n           \"type\": \"string\"\n          }\n         },\n         \"type\": \"object\"\n        },\n        \"type\": \"array\"\n       },\n       \"projection\": {\n        \"description\": \"Represents attributes that are copied (projected) from the table into an\\nindex. These are in addition to the primary key attributes and index key\\nattributes, which are automatically projected.\",\n        \"properties\": {\n         \"nonKeyAttributes\": {\n          \"items\": {\n           \"type\": \"string\"\n          },\n          \"type\": \"array\"\n         },\n         \"projectionType\": {\n          \"type\": \"string\"\n         }\n        },\n        \"type\": \"object\"\n       }\n      },\n      \"type\": \"object\"\n     },\n     \"type\": \"array\"\n    },\n    \"provisionedThroughput\": {\n     \"description\": \"Represents the provisioned throughput settings for a specified table or index.\\nThe settings can be modified using the UpdateTable operation.\\n\\n\\nIf you set BillingMode as PROVISIONED, you must specify this property. If\\nyou set BillingMode as PAY_PER_REQUEST, you cannot specify this property.\\n\\n\\nFor current minimum and maximum provisioned throughput values, see Service,\\nAccount, and Table Quotas (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html)\\nin the Amazon DynamoDB Developer Guide.\",\n     \"properties\": {\n      \"readCapacityUnits\": {\n       \"format\": \"int64\",\n       \"type\": \"integer\"\n      },\n      \"writeCapacityUnits\": {\n       \"format\": \"int64\",\n       \"type\": \"integer\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"sseSpecification\": {\n     \"description\": \"Represents the settings used to enable server-side encryption.\",\n     \"properties\": {\n      \"enabled\": {\n       \"type\": \"boolean\"\n      },\n      \"kmsMasterKeyID\": {\n       \"type\": \"string\"\n      },\n      \"sseType\": {\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"streamSpecification\": {\n     \"description\": \"The settings for DynamoDB Streams on the table. These settings consist of:\\n\\n\\n  - StreamEnabled - Indicates whether DynamoDB Streams is to be enabled\\n    (true) or disabled (false).\\n\\n\\n  - StreamViewType - When an item in the table is modified, StreamViewType\\n    determines what information is written to the table's stream. Valid values\\n    for StreamViewType are: KEYS_ONLY - Only the key attributes of the modified\\n    item are written to the stream. NEW_IMAGE - The entire item, as it appears\\n    after it was modified, is written to the stream. OLD_IMAGE - The entire\\n    item, as it appeared before it was modified, is written to the stream.\\n    NEW_AND_OLD_IMAGES - Both the new and the old item images of the item\\n    are written to the stream.\",\n     \"properties\": {\n      \"streamEnabled\": {\n       \"type\": \"boolean\"\n      },\n      \"streamViewType\": {\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"tableClass\": {\n     \"description\": \"The table class of the new table. Valid values are STANDARD and STANDARD_INFREQUENT_ACCESS.\",\n     \"type\": \"string\"\n    },\n    \"tableName\": {\n     \"description\": \"The name of the table to create.\",\n     \"type\": \"string\"\n    },\n    \"tags\": {\n     \"description\": \"A list of key-value pairs to label the table. For more information, see Tagging\\nfor DynamoDB (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html).\",\n     \"items\": {\n      \"description\": \"Describes a tag. A tag is a key-value pair. You can add up to 50 tags to\\na single DynamoDB table.\\n\\n\\nAmazon Web Services-assigned tag names and values are automatically assigned\\nthe aws: prefix, which the user cannot assign. Amazon Web Services-assigned\\ntag names do not count towards the tag limit of 50. User-assigned tag names\\nhave the prefix user: in the Cost Allocation Report. You cannot backdate\\nthe application of a tag.\\n\\n\\nFor an overview on tagging DynamoDB resources, see Tagging for DynamoDB (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html)\\nin the Amazon DynamoDB Developer Guide.\",\n      \"properties\": {\n       \"key\": {\n        \"type\": \"string\"\n       },\n       \"value\": {\n        \"type\": \"string\"\n       }\n      },\n      \"type\": \"object\"\n     },\n     \"type\": \"array\"\n    },\n    \"timeToLive\": {\n     \"description\": \"Represents the settings used to enable or disable Time to Live for the specified\\ntable.\",\n     \"properties\": {\n      \"attributeName\": {\n       \"type\": \"string\"\n      },\n      \"enabled\": {\n       \"type\": \"boolean\"\n      }\n     },\n     \"type\": \"object\"\n    }\n   },\n   \"required\": [\n    \"attributeDefinitions\",\n    \"keySchema\",\n    \"tableName\"\n   ],\n   \"type\": \"object\"\n  }\n },\n \"title\": \"Table\",\n \"type\": \"object\"\n}"
 }